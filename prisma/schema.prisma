datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

model Profile {
  id          Int        @id @default(autoincrement()) @db.Integer
  role        String     @default("user") @db.Text
  displayName String     @default("diaplay name") @db.Text
  avatar      String     @default("https://i.pravatar.cc/320") @db.Text
  bio         String?    @db.Text
  isActive    Boolean    @default(false) @db.Boolean
  isVerified  Boolean    @default(false) @db.Boolean
  createdAt   DateTime   @default(now()) @db.Timestamptz()
  updatedAt   DateTime   @updatedAt @db.Timestamptz()
  watchList   Watch[]
  favorites   Favorite[]

  @@map("profiles")
}

model Genre {
  id        Int            @id @default(autoincrement()) @db.Integer
  text      String         @unique @db.Text
  updatedAt DateTime       @updatedAt @db.Timestamptz()
  albums    GenreOfAlbum[]

  @@map("genres")
}

model Album {
  id          String         @id @default(uuid()) @db.Uuid
  name        String         @unique @db.Text
  description String?        @db.Text
  poster      String?        @db.Text
  category    String         @default("cinema") @db.Text
  groupId     String         @default(uuid()) @db.Uuid
  seasonNo    Int            @default(1) @db.Integer
  isActive    Boolean        @default(true) @db.Boolean
  releaseAt   DateTime?      @db.Timestamptz()
  createdAt   DateTime       @default(now()) @db.Timestamptz()
  updatedAt   DateTime       @updatedAt @db.Timestamptz()
  genres      GenreOfAlbum[]
  tracks      Track[]
  favorites   Favorite[]

  @@index(fields: [name, description])
  @@map("albums")
}

model Track {
  id          String   @id @default(uuid()) @db.Uuid
  title       String   @unique @db.Text
  description String?  @db.Text
  poster      String?  @db.Text
  seasonNo    Int      @default(1) @db.Integer
  episodeNo   Int      @default(1) @db.Integer
  duration    Float    @default(0) @db.DoublePrecision
  skip        Json?    @db.Json
  filePath    String   @db.Text
  fileSize    Float    @db.DoublePrecision
  chunkSize   Float    @default(0) @db.DoublePrecision
  isActive    Boolean  @default(true) @db.Boolean
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @updatedAt @db.Timestamptz()
  albumId     String   @db.Uuid
  albums      Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  watch       Watch[]

  @@index(fields: [title, description])
  @@map("tracks")
}

model Watch {
  id       String  @id @default(uuid()) @db.Uuid
  seekTime Float   @default(0) @db.DoublePrecision
  status   String  @default("new") @db.Text
  userId   Int     @db.Integer
  users    Profile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  trackId  String  @db.Uuid
  tracks   Track   @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("watch")
}

model Favorite {
  id      Int     @id @default(autoincrement()) @db.Integer
  userId  Int     @db.Integer
  users   Profile @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  albumId String  @db.Uuid
  album   Album   @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("favorites")
}

model GenreOfAlbum {
  id        Int      @id @default(autoincrement()) @db.Integer
  albumId   String   @db.Uuid
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  genreId   Int      @db.Integer
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamptz()

  @@map("_genreOfAlbum")
}
